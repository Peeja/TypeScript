=== tests/cases/compiler/dependentReturnType.ts ===
interface A {
    1: number;
>1 : number

    2: string;
>2 : string
}

function foo(x: 1 | 2): A[narrow x] {
>foo : (x: 1 | 2) => A[narrow x]
>x : 1 | 2

    if (x === 1) {
>x === 1 : boolean
>x : 1 | 2
>1 : 1

        return 0;
>0 : 0
    }
    else {
        return false;
>false : false
    }
}

const r: number = foo(1);
>r : number
>foo(1) : number
>foo : (x: 1 | 2) => A[narrow x]
>1 : 1

const r2: string = foo(2);
>r2 : string
>foo(2) : string
>foo : (x: 1 | 2) => A[narrow x]
>2 : 2

const r3 = foo(undefined as any as (1 | 2));
>r3 : string | number
>foo(undefined as any as (1 | 2)) : string | number
>foo : (x: 1 | 2) => A[narrow x]
>undefined as any as (1 | 2) : 1 | 2
>undefined as any : any
>undefined : undefined

