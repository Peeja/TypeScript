=== tests/cases/compiler/dependentReturnType.ts ===
interface A {
>A : Symbol(A, Decl(dependentReturnType.ts, 0, 0))

    1: number;
>1 : Symbol(A[1], Decl(dependentReturnType.ts, 0, 13))

    2: string;
>2 : Symbol(A[2], Decl(dependentReturnType.ts, 1, 14))
}

function foo(x: 1 | 2): A[narrow x] {
>foo : Symbol(foo, Decl(dependentReturnType.ts, 3, 1))
>x : Symbol(x, Decl(dependentReturnType.ts, 5, 13))
>A : Symbol(A, Decl(dependentReturnType.ts, 0, 0))

    if (x === 1) {
>x : Symbol(x, Decl(dependentReturnType.ts, 5, 13))

        return 0;
    }
    else {
        return false;
    }
}

const r: number = foo(1);
>r : Symbol(r, Decl(dependentReturnType.ts, 14, 5))
>foo : Symbol(foo, Decl(dependentReturnType.ts, 3, 1))

const r2: string = foo(2);
>r2 : Symbol(r2, Decl(dependentReturnType.ts, 15, 5))
>foo : Symbol(foo, Decl(dependentReturnType.ts, 3, 1))

const r3 = foo(undefined as any as (1 | 2));
>r3 : Symbol(r3, Decl(dependentReturnType.ts, 16, 5))
>foo : Symbol(foo, Decl(dependentReturnType.ts, 3, 1))
>undefined : Symbol(undefined)

